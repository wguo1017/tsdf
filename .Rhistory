}
else {
mtd[i] <- dose
}
}
# case : escalate (E)
if(des[i, dose] == "E") {
if(dose != n_dose) {
# check if next dose level is available
if((dose+1) %in% rm.dose) {
if(np[i, dose] != maxn) {
dose <- dose
} else {
mtd[i] <- dose
}
} else {
if(np[i, dose + 1] != maxn) {
dose <- dose + 1
} else {
mtd[i] <- dose
}
}
} else {
mtd[i] <- "U"
}
}
# case : de-escalate (D)
if(des[i, dose] == "D") {
if(dose != 1) {
if(np[i, dose-1] != maxn) {
dose <- dose - 1
} else {
mtd[i] <- dose -1
}
} else {
mtd[i] <- "L"
}
}
# case : de-escalate (DU)
if(des[i, dose] == "DU") {
if(dose != 1) {
# can not go back to this dose again
rm.dose <- c(rm.dose, dose)
if(np[i, dose-1] != maxn) {
dose <- dose - 1
} else {
mtd[i] <- dose -1
}
} else {
mtd[i] <- "L"
}
}
}
}
# calculate mtd probabilty
mtd.prob <- sapply(c(1:n_dose, "L", "U"), function(ii) mean(mtd == ii))
# calculate power
over <- matrix(0, nsim, n_dose)
over[des == "D" | des == "DU"] <- 1
over[des == "S" | des == "E"] <- 0.5
max.over <- apply(over, 1, max)
for(i in 1 : nsim) {
if(max.over[i] == 1) {
iid <- which(over[i, ] == 1)[1]
} else {
iid <- min(max(which(over[i, ] == 0.5)) + 1, n_dose)
}
over[i, iid : n_dose] <- 1
}
over[over == 0.5] <- 0
over.prob <- colMeans(over)
out <- list(mtd = mtd, mtd.prob = mtd.prob, dlt = colMeans(dlt), n.patients = colMeans(np), over.prob = over.prob, truep = truep, start.level = start.level, nsim = nsim, dlt.all = dlt, np.all = np)
class(out) <- "dec.sim"
return(out)
}
run <-dec.sim(truep1, dt_4, start.level=1, nsim=1000)
run$np.all
select.mtd(0.3, run$np.all[1,], run$dlt.all[1,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE))
iso
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso
sapply(1:5, function(tt) mean(iso==tt))
truep1
summary(run, pt=0.3)
dt_1 <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3,6), sf.param=4)$table
dt_2 <- dt_1
dt_3 <- dt_1
dt_2[,1] <- c("E", "S", "D", "DU", rep(0, 13-4))
dt_2[,2] <- c("E", "E", "S", "S", "DU", "DU", "DU", rep(0,13-7))
dt_2[,3] <- c("E", "E", "E", "S", "S", "D", "DU", rep("DU", 6))
dt_3[,2] <- c("E", "E", "S", "D", "DU", "DU", "DU", rep(0,13-7))
dt_3[,3] <- c(rep("E", 3), rep("S", 2), rep("D", 2), rep("DU", 6))
dt_4 <- dt_1
dt_4[,1] <- c("E", "D", "D", "DU", rep(0, 13-4))
dt_4[,2] <- c("E", "E", "D", "D", "DU", "DU", "DU", rep(0,13-7))
dt_4[,3] <- c(rep("E", 4), rep("D", 3), rep("DU", 6))
set.seed(123)
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
run <-dec.sim(truep1, dt_1, start.level=1, nsim=1000)
summary(run, pt=0.3)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
sapply(1:5, function(tt) mean(iso==tt))
dt <- list(dt_1, dt_2, dt_3, dt_4)
dt[[1]]
sapply(1:5, function(tt) mean(iso==tt))
set.seed(123)
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
dt <- list(dt_1, dt_2, dt_3, dt_4)
run <-dec.sim(truep1, dt_1, start.level=1, nsim=1000)
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep1, dt[[u]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
dt <- list(dt_1, dt_2, dt_3, dt_4)
run <-dec.sim(truep1, dt_1, start.level=1, nsim=1000)
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep1, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
dt <- list(dt_1, dt_2, dt_3, dt_4)
run <-dec.sim(truep1, dt_1, start.level=1, nsim=1000)
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep1, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
iso.mtd
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep2, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
iso.mtd
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep3, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
iso.mtd
dt_2 <- dec.table(0.6, 0.6, 0.6, 0.3, c(3,3))$table
dt_1 <- dt_2
dt_1[dt_1=="DU"] <- "D"
dt_2 <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3))$table
dt_3 <- dt_2
dt_3[, 2] <- c(rep("E",2), rep("S", 2), rep("DU", 3))
# dt_4 <- dt_1
# dt_4[, 1] <- c("E", "D", "D", "DU", rep(0, 3))
# dt_4[, 2] <- c("E", "E", "D", "D", "DU", "DU", "DU")
dt_4 <- dec.table(0.4, 0.4, 0.1, 0.3, c(3,3))$table
dt_4[2,1] <- "D"
dt_4[, 2] <- c(rep("E", 2), rep("D", 2), rep("DU", 3))
dt_1
dt_2
dt_3
dt_4
set.seed(123)
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
dt <- list(dt_1, dt_2, dt_3, dt_4)
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep1, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
iso.mtd
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep2, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
dt_4
iso.matd
iso.mtd
iso.mtd <- matrix(0, 4, 5)
for(i in 1:4){
run <-dec.sim(truep3, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso.mtd[i, ] <- sapply(1:5, function(tt) mean(iso==tt))
}
sio.mtd
iso.mtd
three <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3,6), sf.param=4)
two <- dec.table(0.6, 0.6, 0.6, 0.3, c(3,3))
two
names(two)
three <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3,6), sf.param=4)
two <- dec.table(0.6, 0.6, 0.6, 0.3, c(3,3))
two
?dec.table
two
dec.table(0.6, 0.6, 0.6, 0.3, c(3,3))$table
dt_2 <- dec.table(0.6, 0.6, 0.6, 0.3, c(3,3))$table
dt_1 <- dt_2
dt_1[dt_1=="DU"] <- "D"
dt_2 <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3))$table
dt_3 <- dt_2
dt_3[, 2] <- c(rep("E",2), rep("S", 2), rep("DU", 3))
# dt_4 <- dt_1
# dt_4[, 1] <- c("E", "D", "D", "DU", rep(0, 3))
# dt_4[, 2] <- c("E", "E", "D", "D", "DU", "DU", "DU")
dt_4 <- dec.table(0.4, 0.4, 0.1, 0.3, c(3,3))$table
dt_4[2,1] <- "D"
dt_4[, 2] <- c(rep("E", 2), rep("D", 2), rep("DU", 3))
dt_1
dt_2
dec.table(0.6, 0.4, 0.1, 0.3, c(3,3))
three <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3,6), sf.param=4)
two <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3))
two
three
library(tsdf)
library(BOIN)
# check BOIN decision table
# library(BOIN)
# get.boundary(0.3, 4, 3, n.earlystop = 100, p.saf = 0.25, p.tox = 0.35, cutoff.eli = 0.95, extrasafe = FALSE,
# offset = 0.05)
dec.sim  <- function(truep, decTable, start.level = 1, nsim = 1000) {
# initialization
n_dose <- length(truep)
input.sample <- as.numeric(colnames(decTable))
maxn <- nrow(decTable) - 1
nc <- ncol(decTable)
if(input.sample[length(input.sample)] != maxn) {
stop("Please check decision table format")
}
add <- c(input.sample[1], diff(input.sample))
mtd <- rep(0, nsim)
np <- dlt <- des <- over <- matrix(0, nsim, n_dose)
for(i in 1:nsim){
# dose need to be removed
rm.dose <- NULL
# current dose level
dose <- start.level
# stage current dose at
sample.stage <- rep(1, n_dose)
while(mtd[i] == 0 & !is.na(mtd[i])){
add.sample <- add[sample.stage[dose]]
np[i, dose] <- np[i, dose] + add.sample
dlt[i, dose] <- dlt[i, dose] + sum(rbinom(add.sample, 1, truep[dose]))
des[i, dose] <- as.character(decTable[dlt[i, dose]+1, sample.stage[dose]])
sample.stage[dose] <- sample.stage[dose] + 1
# case: stay (S)
if(des[i, dose] == "S"){
if(np[i, dose] != maxn) {
dose <- dose
}
else {
mtd[i] <- dose
}
}
# case : escalate (E)
if(des[i, dose] == "E") {
if(dose != n_dose) {
# check if next dose level is available
if((dose+1) %in% rm.dose) {
if(np[i, dose] != maxn) {
dose <- dose
} else {
mtd[i] <- dose
}
} else {
if(np[i, dose + 1] != maxn) {
dose <- dose + 1
} else {
mtd[i] <- dose
}
}
} else {
mtd[i] <- "U"
}
}
# case : de-escalate (D)
if(des[i, dose] == "D") {
if(dose != 1) {
if(np[i, dose-1] != maxn) {
dose <- dose - 1
} else {
mtd[i] <- dose -1
}
} else {
mtd[i] <- "L"
}
}
# case : de-escalate (DU)
if(des[i, dose] == "DU") {
if(dose != 1) {
# can not go back to this dose again
rm.dose <- c(rm.dose, dose)
if(np[i, dose-1] != maxn) {
dose <- dose - 1
} else {
mtd[i] <- dose -1
}
} else {
mtd[i] <- "L"
}
}
}
}
# calculate mtd probabilty
mtd.prob <- sapply(c(1:n_dose, "L", "U"), function(ii) mean(mtd == ii))
# calculate power
over <- matrix(0, nsim, n_dose)
over[des == "D" | des == "DU"] <- 1
over[des == "S" | des == "E"] <- 0.5
max.over <- apply(over, 1, max)
for(i in 1 : nsim) {
if(max.over[i] == 1) {
iid <- which(over[i, ] == 1)[1]
} else {
iid <- min(max(which(over[i, ] == 0.5)) + 1, n_dose)
}
over[i, iid : n_dose] <- 1
}
over[over == 0.5] <- 0
over.prob <- colMeans(over)
out <- list(mtd = mtd, mtd.prob = mtd.prob, dlt = colMeans(dlt), n.patients = colMeans(np), over.prob = over.prob, truep = truep, start.level = start.level, nsim = nsim, dlt.all = dlt, np.all = np)
class(out) <- "dec.sim"
return(out)
}
# three-stage design comparison-isotonic regression
dt_1 <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3,6), sf.param=4)$table
dt_2 <- dt_1
dt_3 <- dt_1
dt_2[,1] <- c("E", "S", "D", "DU", rep(0, 13-4))
dt_2[,2] <- c("E", "E", "S", "S", "DU", "DU", "DU", rep(0,13-7))
dt_2[,3] <- c("E", "E", "E", "S", "S", "D", "DU", rep("DU", 6))
dt_3[,2] <- c("E", "E", "S", "D", "DU", "DU", "DU", rep(0,13-7))
dt_3[,3] <- c(rep("E", 3), rep("S", 2), rep("D", 2), rep("DU", 6))
dt_4 <- dt_1
dt_4[,1] <- c("E", "D", "D", "DU", rep(0, 13-4))
dt_4[,2] <- c("E", "E", "D", "D", "DU", "DU", "DU", rep(0,13-7))
dt_4[,3] <- c(rep("E", 4), rep("D", 3), rep("DU", 6))
set.seed(123)
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
dt <- list(dt_1, dt_2, dt_3, dt_4)
run <-dec.sim(truep3, dt[[i]], start.level=1, nsim=1000)
run
names(run)
run$mtd
names(run)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso
dec.sim  <- function(truep, decTable, start.level = 1, nsim = 1000) {
# initialization
n_dose <- length(truep)
input.sample <- as.numeric(colnames(decTable))
maxn <- nrow(decTable) - 1
nc <- ncol(decTable)
if(input.sample[length(input.sample)] != maxn) {
stop("Please check decision table format")
}
add <- c(input.sample[1], diff(input.sample))
mtd <- rep(0, nsim)
np <- dlt <- des <- over <- matrix(0, nsim, n_dose)
for(i in 1:nsim){
# dose need to be removed
rm.dose <- NULL
# current dose level
dose <- start.level
# stage current dose at
sample.stage <- rep(1, n_dose)
while(mtd[i] == 0 & !is.na(mtd[i])){
add.sample <- add[sample.stage[dose]]
np[i, dose] <- np[i, dose] + add.sample
dlt[i, dose] <- dlt[i, dose] + sum(rbinom(add.sample, 1, truep[dose]))
des[i, dose] <- as.character(decTable[dlt[i, dose]+1, sample.stage[dose]])
sample.stage[dose] <- sample.stage[dose] + 1
# case: stay (S)
if(des[i, dose] == "S"){
if(np[i, dose] != maxn) {
dose <- dose
}
else {
mtd[i] <- dose
}
}
# case : escalate (E)
if(des[i, dose] == "E") {
if(dose != n_dose) {
# check if next dose level is available
if((dose+1) %in% rm.dose) {
if(np[i, dose] != maxn) {
dose <- dose
} else {
mtd[i] <- dose
}
} else {
if(np[i, dose + 1] != maxn) {
dose <- dose + 1
} else {
mtd[i] <- dose
}
}
} else {
mtd[i] <- "U"
}
}
# case : de-escalate (D)
if(des[i, dose] == "D") {
if(dose != 1) {
if(np[i, dose-1] != maxn) {
dose <- dose - 1
} else {
mtd[i] <- dose -1
}
} else {
mtd[i] <- "L"
}
}
# case : de-escalate (DU)
if(des[i, dose] == "DU") {
if(dose != 1) {
# can not go back to this dose again
rm.dose <- c(rm.dose, dose)
if(np[i, dose-1] != maxn) {
dose <- dose - 1
} else {
mtd[i] <- dose -1
}
} else {
mtd[i] <- "L"
}
}
}
}
# calculate mtd probabilty
mtd.prob <- sapply(c(1:n_dose, "L", "U"), function(ii) mean(mtd == ii))
# calculate power
over <- matrix(0, nsim, n_dose)
over[des == "D" | des == "DU"] <- 1
over[des == "S" | des == "E"] <- 0.5
max.over <- apply(over, 1, max)
for(i in 1 : nsim) {
if(max.over[i] == 1) {
iid <- which(over[i, ] == 1)[1]
} else {
iid <- min(max(which(over[i, ] == 0.5)) + 1, n_dose)
}
over[i, iid : n_dose] <- 1
}
over[over == 0.5] <- 0
over.prob <- colMeans(over)
out <- list(mtd = mtd, mtd.prob = mtd.prob, dlt = colMeans(dlt), n.patients = colMeans(np), over.prob = over.prob, truep = truep, start.level = start.level, nsim = nsim, dlt.all = dlt, np.all = np, des=des)
class(out) <- "dec.sim"
return(out)
}
dt_1 <- dec.table(0.6, 0.4, 0.1, 0.3, c(3,3,6), sf.param=4)$table
dt_2 <- dt_1
dt_3 <- dt_1
dt_2[,1] <- c("E", "S", "D", "DU", rep(0, 13-4))
dt_2[,2] <- c("E", "E", "S", "S", "DU", "DU", "DU", rep(0,13-7))
dt_2[,3] <- c("E", "E", "E", "S", "S", "D", "DU", rep("DU", 6))
dt_3[,2] <- c("E", "E", "S", "D", "DU", "DU", "DU", rep(0,13-7))
dt_3[,3] <- c(rep("E", 3), rep("S", 2), rep("D", 2), rep("DU", 6))
dt_4 <- dt_1
dt_4[,1] <- c("E", "D", "D", "DU", rep(0, 13-4))
dt_4[,2] <- c("E", "E", "D", "D", "DU", "DU", "DU", rep(0,13-7))
dt_4[,3] <- c(rep("E", 4), rep("D", 3), rep("DU", 6))
set.seed(123)
truep1 <- c(0.05,0.30, 0.50,0.6,0.7)
truep2 <- c(0.10,0.15, 0.3, 0.45, 0.5)
truep3 <- c(0.01, 0.10, 0.25, 0.30, 0.40)
truep <- list(truep1, truep2, truep3)
dt <- list(dt_1, dt_2, dt_3, dt_4)
iso.mtd <- matrix(0, 4, 5)
run <-dec.sim(truep3, dt[[i]], start.level=1, nsim=1000)
run$des
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
iso
cbind(run$des, run$mtd, iso)
run
summary(run)
summary(run, pt=0.3)
i
i=1
run <-dec.sim(truep3, dt[[i]], start.level=1, nsim=1000)
iso <- sapply(1:1000, function(tt) select.mtd(0.3, run$np.all[tt,], run$dlt.all[tt,], cutoff.eli=0.95, extrasafe=FALSE, offset=0.05,verbose=TRUE)$MTD)
summary(run, pt=0.3)
cbind(run$des, run$mtd, iso)
res[res[,6] == 4,]
res <- cbind(run$des, run$mtd, iso)
res[res[,6] == 4,]
