t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, cond3, cond5), err)
}
}
} else next
}
#   }
#   else next
# }
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
nmax
nmax=100
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
# if(two.sided) s1_lb <- r1 + 1
# else s1_lb <- n1
# for(s1 in s1_lb:n1){
#   pet.r <- 1 - pbinom(s1, n1, pc[1])
#   if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, cond3, cond5), err)
}
}
} else next
}
#   }
#   else next
# }
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
asd <- cbind(err, comb)
asd
two.sided
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) s1_lb <- r1 + 1
else s1_lb <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
out <- cbind(err, comb)
out
asd
two.sided=FALSE
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) s1_lb <- r1 + 1
else s1_lb <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
out <- cbind(err, comb)
out
two.sided=1
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) s1_lb <- r1 + 1
else s1_lb <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
out <- cbind(err, comb)
out
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) s1_lb <- r1 + 1
else s1_lb <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) s1_lb <- r1 + 1
else s1_lb <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
out <- cbind(err, comb)
# out <- out[order(out[,8],-out[,2]),]
# out <- out[!duplicated(out[,8]), ]
# out <- out[order(-out[,2], -out[,3], out[, 4]), ]
out <- out[order(out[,10],-out[,2]),]
opt <- out[1, ]
opt
names(opt) <- c("alpha11", "alpha12", "alpha21", "alpha22", "beta", "r1", "r2", "s1", "s2", "n1", "n2")
opt
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) {
s1_lb <- r1 + 1
s1_ub <- n1 - 1
}
else s1_lb <- s1_ub <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
out <- cbind(err, comb)
# out <- out[order(out[,8],-out[,2]),]
# out <- out[!duplicated(out[,8]), ]
# out <- out[order(-out[,2], -out[,3], out[, 4]), ]
out <- out[order(out[,10],-out[,2]),]
opt <- out[1, ]
names(opt) <- c("alpha11", "alpha12", "alpha21", "alpha22", "beta", "r1", "r2", "s1", "s2", "n1", "n2")
opt
s1
n1
s1_ub
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) {
s1_lb <- r1 + 1
s1_ub <- n1 - 1
}
else s1_lb <- s1_ub <- n1
for(s1 in s1_lb:n1){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
s1_ub
b``
out <- cbind(err, comb)
# out <- out[order(out[,8],-out[,2]),]
# out <- out[!duplicated(out[,8]), ]
# out <- out[order(-out[,2], -out[,3], out[, 4]), ]
out <- out[order(out[,10],-out[,2]),]
opt <- out[1, ]
names(opt) <- c("alpha11", "alpha12", "alpha21", "alpha22", "beta", "r1", "r2", "s1", "s2", "n1", "n2")
opt
s1_ub
s1
n1
s1_lb
two.sided
for(n in 2 : nmax) {
comb <- NULL
err <- NULL
n_count <- 0
for(n1 in 1:(n-1)) {
n2 <- n - n1
if(!is.null(sf.param)) {
alpha1 <- HSD(alpha1[2], c(n1, n)/n, sf.param)
alpha2 <- HSD(alpha2[2], c(n1, n)/n, sf.param)
}
for(r1 in 0:(n1-1)) {
if(two.sided) {
s1_lb <- r1 + 1
s1_ub <- n1 - 1
}
else s1_lb <- s1_ub <- n1
for(s1 in s1_lb:s1_ub){
pet.r <- 1 - pbinom(s1, n1, pc[1])
if(pet.r <= alpha2[1]) {
for(r2 in r1 : (n2+r1)){
t <- (r1+1) : n1
b <- dbinom(t, n1, pc[1])
pet1 <- pbinom(r1, n1, pc[1])
if(pet1 <=  alpha1[1]) cond1 <- pet1 + sum(b * pbinom(r2 - t, n2, pc[1]))
else next
if(cond1 <= alpha1[2]) cond2 <- pet1 + sum(b * pbinom(r2 - t + 1, n2, pc[1]))
else next
if(cond2 > alpha1[2]) {
for(s2 in r2 : n) {
cond3 <- sum(b * (1 - pbinom(s2 - t, n2, pc[2])))
if(cond3 <= alpha2[2]) cond4 <- sum(b * (1 - pbinom(s2 - t - 1, n2, pc[2])))
else next
if(cond4 > alpha2[2]) cond5 <- sum(dbinom(t, n1, pt) * pbinom(s2 - t, n2, pt))
else next
if(cond5 <= beta){
comb <- rbind(c(r1, r2, s1, s2, n1, n2), comb)
err <- rbind(c(pet1, cond1, pet.r, cond3, cond5), err)
}
}
} else next
}
}
else next
}
}
}
if(!is.null(comb)) n_count <- nrow(comb)
if(n_count > n.ratio * n) break
if(show) print(paste("current sample size is", n))
}
out <- cbind(err, comb)
# out <- out[order(out[,8],-out[,2]),]
# out <- out[!duplicated(out[,8]), ]
# out <- out[order(-out[,2], -out[,3], out[, 4]), ]
out <- out[order(out[,10],-out[,2]),]
opt <- out[1, ]
names(opt) <- c("alpha11", "alpha12", "alpha21", "alpha22", "beta", "r1", "r2", "s1", "s2", "n1", "n2")
opt
asd
